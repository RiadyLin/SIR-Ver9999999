/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sumames.sir.ui.people;

import com.sumames.sir.Main;
import com.sumames.sir.entity.Employer;
import com.sumames.sir.helper.AppUtil;
import com.sumames.sir.helper.ComponentUtils;
import com.sumames.sir.helper.Support;
import java.awt.Color;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author My pc
 */
public class EmployerList extends javax.swing.JPanel {

    private List<Employer> employers;

    /**
     * Creates new form people
     */
    public EmployerList() {
        initComponents();
        refreshTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbEmployer = new javax.swing.JTable();
        tfSearch = new javax.swing.JTextField();
        btSearch = new javax.swing.JButton();
        btAdd = new javax.swing.JButton();
        btEdit = new javax.swing.JButton();
        btDelete = new javax.swing.JButton();
        btRefresh = new javax.swing.JButton();
        chkDelete = new javax.swing.JCheckBox();

        setBackground(new java.awt.Color(255, 153, 0));
        setToolTipText("");
        setName(""); // NOI18N
        setOpaque(false);

        tbEmployer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbEmployer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbEmployerMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbEmployer);

        tfSearch.setPreferredSize(new java.awt.Dimension(6, 25));
        tfSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfSearchKeyReleased(evt);
            }
        });

        btSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sumames/sir/resources/image/buttons/1-01.png"))); // NOI18N
        btSearch.setBorderPainted(false);
        btSearch.setContentAreaFilled(false);

        btAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sumames/sir/resources/image/buttons/2-01.png"))); // NOI18N
        btAdd.setBorder(null);
        btAdd.setContentAreaFilled(false);
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });

        btEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sumames/sir/resources/image/buttons/3-01.png"))); // NOI18N
        btEdit.setBorder(null);
        btEdit.setContentAreaFilled(false);
        btEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEditActionPerformed(evt);
            }
        });

        btDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sumames/sir/resources/image/buttons/4-01.png"))); // NOI18N
        btDelete.setBorder(null);
        btDelete.setContentAreaFilled(false);
        btDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteActionPerformed(evt);
            }
        });

        btRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sumames/sir/resources/image/buttons/5-01.png"))); // NOI18N
        btRefresh.setBorderPainted(false);
        btRefresh.setContentAreaFilled(false);
        btRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRefreshActionPerformed(evt);
            }
        });

        chkDelete.setForeground(new java.awt.Color(255, 255, 255));
        chkDelete.setText("Show Deleted");
        chkDelete.setOpaque(false);
        chkDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 824, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chkDelete))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btDelete)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btDelete, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btEdit, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.CENTER, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addComponent(btAdd)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chkDelete))
                            .addComponent(btSearch)
                            .addComponent(btRefresh))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
        new Support().NewTab(Main.getFrame().getTab(), new EmployerData("NEW", 0), "Employer Input");
    }//GEN-LAST:event_btAddActionPerformed

    private void tbEmployerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbEmployerMouseClicked
        if (evt.getClickCount() == 2) {
            if (tbEmployer.getSelectedRow() >= 0) {
                EmployerData cd = new EmployerData("EDIT", Integer.valueOf(tbEmployer.getValueAt(tbEmployer.getSelectedRow(), 0).toString()));
                new Support().NewTab(Main.getFrame().getTab(), cd, "Employer Data - " + tbEmployer.getValueAt(tbEmployer.getSelectedRow(), 1).toString());

//            JOptionPane.showMessageDialog(null, tbCustomer.getValueAt(tbCustomer.getSelectedRow(), 0).toString());
            }
        }
    }//GEN-LAST:event_tbEmployerMouseClicked

    private void btEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEditActionPerformed
        if (tbEmployer.getSelectedRow() >= 0) {
            EmployerData cd = new EmployerData("EDIT", Integer.valueOf(tbEmployer.getValueAt(tbEmployer.getSelectedRow(), 0).toString()));
            new Support().NewTab(Main.getFrame().getTab(), cd, "Employer Data - " + tbEmployer.getValueAt(tbEmployer.getSelectedRow(), 1).toString());

//            JOptionPane.showMessageDialog(null, tbCustomer.getValueAt(tbCustomer.getSelectedRow(), 0).toString());
        }
    }//GEN-LAST:event_btEditActionPerformed

    private void btRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRefreshActionPerformed
        refreshTable();
    }//GEN-LAST:event_btRefreshActionPerformed

    private void tfSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfSearchKeyReleased
        for (int i = 0; i < tbEmployer.getRowCount(); i++) {
            if (tbEmployer.getValueAt(i, 1).toString().startsWith(tfSearch.getText())) {
                //select baris yang ditemukan
                tbEmployer.getSelectionModel().setSelectionInterval(i, i);
                //scroll ke baris tersebut kalau ada di bawah atau bagian atas 
                ComponentUtils.scrollToRect(tbEmployer, i);
                break;
            } else if (tbEmployer.getValueAt(i, 2).toString().startsWith(tfSearch.getText())) {
                //select baris yang ditemukan
                tbEmployer.getSelectionModel().setSelectionInterval(i, i);
                //scroll ke baris tersebut kalau ada di bawah atau bagian atas 
                ComponentUtils.scrollToRect(tbEmployer, i);
                break;
            }
        }
    }//GEN-LAST:event_tfSearchKeyReleased

    private void chkDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkDeleteActionPerformed
        refreshTable();
    }//GEN-LAST:event_chkDeleteActionPerformed

    private void btDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteActionPerformed
        if (tbEmployer.getSelectedRow() >= 0) {
            Employer employer = AppUtil.getService().getEmployerById(Integer.valueOf(tbEmployer.getValueAt(tbEmployer.getSelectedRow(), 0).toString()));
            if (employer != null) {
                employer.setDeleteDatetime(new Date());
                employer.setDeletebyuserRecordid(Main.getFrame().getLogin().getEmployeeRecordId());
                if (AppUtil.getService().save(employer)) {
                    msg("Delete Done!");
                    refreshTable();
                } else {
                    msg("Delete Failed!");
                }

            }

        }
    }//GEN-LAST:event_btDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btDelete;
    private javax.swing.JButton btEdit;
    private javax.swing.JButton btRefresh;
    private javax.swing.JButton btSearch;
    private javax.swing.JCheckBox chkDelete;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbEmployer;
    private javax.swing.JTextField tfSearch;
    // End of variables declaration//GEN-END:variables
    private void refreshTable() {
        if (!chkDelete.isSelected()) {
            employers = AppUtil.getService().getEmployersNotDeleted();
            tbEmployer.setModel(new EmployerNotDeletedTableModel(employers));
            tbEmployer.getColumnModel().getColumn(0).setMinWidth(0);
            tbEmployer.getColumnModel().getColumn(0).setMaxWidth(0);
        } else {
            employers = AppUtil.getService().getEmployers();
            tbEmployer.setModel(new EmployerTableModel(employers));
            tbEmployer.getColumnModel().getColumn(0).setMinWidth(0);
            tbEmployer.getColumnModel().getColumn(0).setMaxWidth(0);
        }
    }

    private class EmployerNotDeletedTableModel extends AbstractTableModel {

        private List<Employer> listEmployers;
        private final String[] tableHeaders = {"Record Id", "No", "Name", "Address", "Telephone", "Email", "Gender"};

        public EmployerNotDeletedTableModel(List<Employer> listEmployers) {
            this.listEmployers = listEmployers;
        }

        public int getRowCount() {
            return listEmployers.size();
        }

        public int getColumnCount() {
            return 7;
        }

        @Override
        public String getColumnName(int columnIndex) {
            return tableHeaders[columnIndex];
        }

        public Object getValueAt(int rowIndex, int columnIndex) {
            Employer p = employers.get(rowIndex);
            switch (columnIndex) {
                case 0:
                    return p.getRecordId();
                case 1:
                    return p.getNo();
                case 2:
                    return p.getName();
                case 3:
                    return p.getAddress();
                case 4:
                    return p.getTelephone();
                case 5:
                    return p.getEmail();
                case 6:
                    return p.getGender();
                default:
                    return "";
            }
        }
    }

    private class EmployerTableModel extends AbstractTableModel {

        private List<Employer> listEmployers;
        private final String[] tableHeaders = {"Record Id", "No", "Name", "Address", "Telephone", "Email", "Gender", "Delete Datetime", "Delete by user id"};

        public EmployerTableModel(List<Employer> listEmployers) {
            this.listEmployers = listEmployers;
        }

        public int getRowCount() {
            return listEmployers.size();
        }

         public int getColumnCount() {
            return 9;
        }

        @Override
        public String getColumnName(int columnIndex) {
            return tableHeaders[columnIndex];
        }

        public Object getValueAt(int rowIndex, int columnIndex) {
            Employer p = employers.get(rowIndex);
            if (p.getDeleteDatetime() != null) {
                tbEmployer.setBackground(Color.red);
            } else {
                tbEmployer.setBackground(Color.white);
            }
            switch (columnIndex) {
                case 0:
                    return p.getRecordId();
                case 1:
                    return p.getNo();
                case 2:
                    return p.getName();
                case 3:
                    return p.getAddress();
                case 4:
                    return p.getTelephone();
                case 5:
                    return p.getEmail();
                case 6:
                    String gender = "";
                    if (p.getGender() == 0) {
                        gender = "Male";
                    } else {
                        gender = "Female";
                    }
                    return gender;
                case 7:
                    return p.getDeleteDatetime();
                case 8:
                    return p.getDeletebyuserRecordid();
                default:
                    return "";
            }
        }
    }
    
    private void msg(String msg) {
        JOptionPane.showMessageDialog(null, msg);
    }

}
